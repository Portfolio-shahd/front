// File: c:\Users\ashre\Downloads\demo (1)\front\asso_front\src\App.tsx
import { ChakraProvider, Box } from "@chakra-ui/react";
import Navbar from "./components/ui/navbar";
import Hero from "./components/ui/hero";
import LandingPage from "./features/landingpage";
import AboutMe from "./components/ui/aboutme";
import Skills from "./components/ui/skills";
import Projects from "./components/ui/projects"; // Import the new Projects component

function App() {
  return (
    <Box w="100vw" overflow="hidden">
      {/* Navbar en haut */}
      <Navbar />
      {/* Landing Page Section */}
      <LandingPage />
      {/* About Me Section */}
      <AboutMe />
      {/* Skills Section */}
      <Skills />
      {/* Projects Section */}
      <Projects />
    </Box>
  );
}

export default App;

// File: c:\Users\ashre\Downloads\demo (1)\front\asso_front\src\components\ui\aboutme.tsx
import {
  Box,
  Container,
  Flex,
  Text,
  Heading,
  VStack
} from '@chakra-ui/react';
import { Player } from '@lottiefiles/react-lottie-player'; // Import Lottie Player
import animationData from '../../assets/animations/website design.json'; // Import your Lottie animation JSON

const AboutMe = () => {

  return (
    <Box
      minH="100vh"
      bg="linear-gradient(135deg, #2D1B69 0%, #1E1B3A 50%, #2A1A3E 100%)"
      position="relative"
      py={20}
      overflow="hidden"
    >
      {/* Background decorative elements - matching landing page */}
      <Box position="absolute" inset={0}>
        <Box
          position="absolute"
          top="80px"
          left="40px"
          w="128px"
          h="128px"
          bg="#8B5CF6"
          opacity={0.15}
          borderRadius="full"
          filter="blur(48px)"
        />
        <Box
          position="absolute"
          top="160px"
          right="80px"
          w="192px"
          h="192px"
          bg="#A855F7"
          opacity={0.2}
          borderRadius="full"
          filter="blur(48px)"
        />
        <Box
          position="absolute"
          bottom="80px"
          left="80px"
          w="160px"
          h="160px"
          bg="#7C3AED"
          opacity={0.15}
          borderRadius="full"
          filter="blur(48px)"
        />
        <Box
          position="absolute"
          bottom="128px"
          right="128px"
          w="96px"
          h="96px"
          bg="#9333EA"
          opacity={0.2}
          borderRadius="full"
          filter="blur(32px)"
        />
      </Box>

      <Container maxW="7xl" position="relative" zIndex={10}>
        {/* Section Header - matching landing page style */}
        <VStack gap={6} mb={16} textAlign="center">
          <Heading
            color="white"
            fontSize={{ base: '4xl', md: '5xl', lg: '6xl' }}
            fontWeight="bold"
          >
            About Me
          </Heading>
          <Box
            w="80px"
            h="4px"
            bg="linear-gradient(90deg, #A855F7 0%, #D946EF 100%)"
            borderRadius="full"
          />
        </VStack>

        <Flex
          direction={{ base: 'column', lg: 'row' }}
          gap={12}
          align="center"
          justify="center"
        >
          {/* Left Side - Just the Lottie Animation */}
          <VStack flex={1} align="center" gap={6}>
            <Box position="relative">
              {/* Just the Lottie Animation - clean and simple */}
              <Box
                w="500px"
                h="500px"
                display="flex"
                alignItems="center"
                justifyContent="center"
              >
                <Player
                  autoplay
                  loop
                  speed={0.7} // Adjust speed if needed
                  src={animationData}
                  style={{ width: '500px', height: '500px' }}
                />
              </Box>
            </Box>
          </VStack>

          {/* Right Side - Content */}
          <VStack flex={1.5} align="start" gap={8}>
            {/* Main content card - updated styling to match landing page */}
            <Box
              bg="rgba(255, 255, 255, 0.1)"
              backdropFilter="blur(20px)"
              borderRadius="3xl"
              px={8}
              py={8}
              border="1px solid"
              borderColor="rgba(255, 255, 255, 0.2)"
              boxShadow="0 8px 32px rgba(0, 0, 0, 0.2)"
              w="full"
              transition="all 0.3s"
              _hover={{ bg: 'rgba(255, 255, 255, 0.15)' }}
            >
              <VStack align="start" gap={6}>
                <Text
                  color="white"
                  fontSize={{ base: 'md', lg: 'lg' }}
                  lineHeight="relaxed"
                  opacity={0.8}
                >
                  Welcome to my portfolio! I'm <Text as="span" bg="linear-gradient(90deg, #A855F7 0%, #D946EF 100%)" bgClip="text" color="transparent" fontWeight="bold">Shahd Najjar</Text>, a third-year Computer Science student at the Higher Institute of Computer Science, passionate about web development and project management. I have a solid mastery of web technologies and hands-on experience in project management through my associative engagement.
                </Text>
                
                <Text
                  color="white"
                  fontSize={{ base: 'md', lg: 'lg' }}
                  lineHeight="relaxed"
                  opacity={0.8}
                >
                  Curious, rigorous, and proactive, I seek to join a dynamic team to contribute to innovative projects while enhancing my technical and professional skills. My internship at StartNow as a full-stack developer involved building a Learning Management System using Spring Boot, React TypeScript, and Chakra UI in an agile setting.
                </Text>

                <Flex align="center" gap={3}>
                  <Text                   color="white"
                  fontSize={{ base: 'md', lg: 'lg' }}
                  lineHeight="relaxed"
                  opacity={0.8}>
                    I am deeply committed to my work, investing creativity and precision into every project to deliver unique and effective solutions.
                  </Text>
                </Flex>
              </VStack>
            </Box>
          </VStack>
        </Flex>
      </Container>

      {/* Bottom decorative elements - matching landing page */}
      <Box
        position="absolute"
        bottom={0}
        left={0}
        w="full"
        h="128px"
        bg="linear-gradient(to top, rgba(45, 27, 105, 0.4) 0%, transparent 100%)"
      />
    </Box>
  );
};

export default AboutMe;

// File: c:\Users\ashre\Downloads\demo (1)\front\asso_front\src\components\ui\hero.tsx
import { Box, Container, Heading, Text, Button, Stack } from "@chakra-ui/react";

export default function Hero() {
  return (
    <Box bg="gray.50" py={20}>
      <Container maxW="container.lg" textAlign="center">
        <Heading as="h1" size="2xl" mb={4}>
          Salut, je suis <Text as="span" color="teal.500">Shahdoud</Text>
        </Heading>
        <Text fontSize="xl" color="gray.600" mb={6}>
          Développeur passionné par React, Chakra UI et la création
          d’expériences web modernes.
        </Text>
        <Stack
          direction={{ base: "column", md: "row" }}
          justify="center"
        >
          <Button colorScheme="teal" size="lg">
            Voir mes projets
          </Button>
          <Button variant="outline" colorScheme="teal" size="lg">
            Contactez-moi
          </Button>
        </Stack>
      </Container>
    </Box>
  );
}


// File: c:\Users\ashre\Downloads\demo (1)\front\asso_front\src\components\ui\MyButton.tsx
import { Button } from '@chakra-ui/react';

interface MyButtonProps {
  text?: string;
  colorScheme?: string;
  size?: 'sm' | 'md' | 'lg';
  onClick?: () => void;
}

export default function MyButton({
  text = 'Clique moi !',
  colorScheme = 'teal',
  size = 'lg',
  onClick,
}: Readonly<MyButtonProps>) {
  return (
    <Button
      colorScheme={colorScheme}
      size={size}
      onClick={onClick}
      borderRadius="md"
      boxShadow="md"
      _hover={{ transform: 'scale(1.05)', boxShadow: 'lg' }}
      transition="all 0.2s"
    >
      {text}
    </Button>
  );
}


// File: c:\Users\ashre\Downloads\demo (1)\front\asso_front\src\components\ui\navbar.tsx
import React, { useRef } from "react";
import {
  Box,
  Flex,
  HStack,
  Link,
  IconButton,
  Button,
  useDisclosure,
  VStack,
} from "@chakra-ui/react";
import { Menu, X } from "lucide-react";

const Links = ["Home", "About Me", "Skills", "Services", "My Projects", "Reviews"];

type NavLinkProps = {
  children: string;
  onClick?: (e: React.MouseEvent) => void;
};

const NavLink = ({ children, onClick }: NavLinkProps) => {
  const id = children.toLowerCase().replace(/\s+/g, "");
  return (
    <Link
      paddingX={2}
      paddingY={1}
      borderRadius="md"
      href={`#${id}`}
      onClick={onClick}
      fontWeight="medium"
      fontSize="lg"
      color="white"
      position="relative"
      transition="all 0.18s ease"
      _hover={{
        textDecoration: "none",
        color: "pink.300",
        transform: "scale(1.03)",
      }}
      _after={{
        content: '""',
        position: "absolute",
        width: "0%",
        height: "2px",
        bottom: 0,
        left: 0,
        background: "pink.400",
        transition: "width 0.28s ease",
      }}
    >
      {children}
    </Link>
  );
};

export default function Navbar() {
  const disclosure = useDisclosure();
  const isOpen: boolean = (disclosure as any).isOpen ?? (disclosure as any).open ?? false;
  const onToggle: () => void =
    (disclosure as any).onToggle ?? (disclosure as any).toggle ?? (() => {});

  // ref pour mesurer la hauteur de la navbar (offset)
  const navbarRef = useRef<HTMLDivElement | null>(null);

  const handleNavClick =
    (anchorId: string) =>
    (e: React.MouseEvent) => {
      // laisse le href pour fallback, mais on empêche le comportement par défaut
      e.preventDefault();

      const target = document.getElementById(anchorId);
      if (!target) return;

      // hauteur du header (navbar) pour compenser l'offset
      const headerHeight = navbarRef.current?.offsetHeight ?? 80;
      const extraSpacing = 12; // petit espace au-dessus de la section
      const targetY =
        target.getBoundingClientRect().top + window.pageYOffset - headerHeight - extraSpacing;

      // smooth scroll
      window.scrollTo({ top: Math.max(0, targetY), behavior: "smooth" });

      // si menu mobile ouvert, on le ferme
      if (isOpen) {
        onToggle();
      }
    };

  return (
    <Box position="absolute" top={0} left={0} right={0} zIndex={20} paddingX={8} paddingY={6}>
      <Box
        ref={navbarRef}
        background="rgba(255, 255, 255, 0.08)"
        backdropFilter="blur(20px)"
        borderRadius="full"
        paddingX={8}
        paddingY={4}
        border="1px solid rgba(255, 255, 255, 0.1)"
        boxShadow="0 8px 32px rgba(0, 0, 0, 0.1)"
        position="relative"
      >
        <Flex alignItems="center" justifyContent="space-between">
          {/* Logo */}
          <Flex alignItems="center" fontWeight="bold" fontSize="2xl">
            <Box
              background="linear-gradient(to right, #ec4899, #a855f7)"
              backgroundClip="text"
              fontSize="3xl"
              fontWeight="extrabold"
            >
              S
            </Box>
          </Flex>

          {/* Desktop Navigation */}
          <HStack gap={8} display={{ base: "none", md: "flex" }} alignItems="center">
            {Links.map((link) => {
              const id = link.toLowerCase().replace(/\s+/g, "");
              return (
                <NavLink key={link} onClick={handleNavClick(id)}>
                  {link}
                </NavLink>
              );
            })}
          </HStack>

          {/* Contact Button */}
          <Button
            background="linear-gradient(to right, #ec4899, #be185d)"
            color="white"
            paddingX={6}
            paddingY={2}
            borderRadius="full"
            fontWeight="semibold"
            fontSize="sm"
            _hover={{
              transform: "translateY(-2px)",
              boxShadow: "0 12px 25px rgba(236, 72, 153, 0.4)",
            }}
            transition="all 0.3s"
            display={{ base: "none", md: "inline-flex" }}
            onClick={handleNavClick("contact")} // si tu as une section contact avec id="contact"
          >
            Contact
          </Button>

          {/* Mobile Menu Toggle */}
          <IconButton
            aria-label="Menu"
            background="rgba(255, 255, 255, 0.15)"
            backdropFilter="blur(20px)"
            color="white"
            borderRadius="xl"
            border="1px solid rgba(255, 255, 255, 0.1)"
            _hover={{ background: "rgba(255, 255, 255, 0.25)" }}
            display={{ base: "flex", md: "none" }}
            onClick={onToggle}
          >
            {isOpen ? <X size={18} /> : <Menu size={18} />}
          </IconButton>
        </Flex>

        {/* Mobile Menu simple (slide via max-height) */}
        <Box
          display={{ md: "none" }}
          maxHeight={isOpen ? "360px" : "0px"}
          overflow="hidden"
          transition="max-height 220ms ease"
          marginTop={4}
        >
          <VStack alignItems="start" gap={4} paddingLeft={4} paddingBottom={4} paddingRight={4}>
            {Links.map((link) => {
              const id = link.toLowerCase().replace(/\s+/g, "");
              return (
                <NavLink key={link} onClick={handleNavClick(id)}>
                  {link}
                </NavLink>
              );
            })}
            <Button
              width="200px"
              background="linear-gradient(to right, #ec4899, #be185d)"
              color="white"
              borderRadius="full"
              fontWeight="semibold"
              fontSize="sm"
              onClick={handleNavClick("contact")}
            >
              Contact
            </Button>
          </VStack>
        </Box>
      </Box>
    </Box>
  );
}


// File: c:\Users\ashre\Downloads\demo (1)\front\asso_front\src\components\ui\projects.tsx
import React, { useState } from 'react';
import {
  Box,
  Container,
  Flex,
  Text,
  Heading,
  VStack,
  HStack,
  Grid,
  GridItem,
  Button,
  DialogRoot,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogBody,
  DialogCloseTrigger,
  Badge,
} from '@chakra-ui/react';

interface Project {
  id: number;
  title: string;
  description: string;
  category: string;
  image: string;
  link: string;
}

const projects: Project[] = [
  {
    id: 1,
    title: 'Application desktop de Gestion de Restaurant',
    description: 'Développement d’une application de bureau pour la gestion des commandes, des tables, du menu et de la facturation dans un restaurant. Interface utilisateur conçue avec JavaFX et base de données relationnelle MySQL pour stocker les informations clients, plats et commandes.',
    category: 'Desktop Development',
    image: 'https://via.placeholder.com/400x300',
    link: '#',
  },
  {
    id: 2,
    title: 'Paradice – Application web de Gestion de Stock',
    description: 'Développement d’une application web interne pour une entreprise de fabrication de glace. Elle permet la gestion des entrées/sorties de stock, le suivi des produits finis et matières premières. Back-end conçu avec Node.js, front-end développé en React.js avec une interface intuitive. Tests d’API et validation fonctionnelle réalisés avec Postman. Données stockées dans une base PostgreSQL.',
    category: 'Web Development',
    image: 'https://via.placeholder.com/400x300',
    link: '#',
  },
  {
    id: 3,
    title: 'Cosmos Delivery – Application Web de Livraison',
    description: 'Développement d’une application web complète de gestion de livraisons. L’application gère plusieurs rôles : Client, Service Client, Livreur, Administrateur. Back-end construit avec Node.js et Express.js, base de données PostgreSQL. Documentation interactive générée avec Swagger. Tests d’API réalisés avec Postman. Interface utilisateur développée en React.js.',
    category: 'Web Development',
    image: 'https://via.placeholder.com/400x300',
    link: '#',
  },
  {
    id: 4,
    title: 'Portfolio Website',
    description: 'A personal portfolio showcasing creative projects with a focus on modern aesthetics.',
    category: 'Web Development',
    image: 'https://via.placeholder.com/400x300',
    link: '#',
  },
];

const Projects = () => {
  const [filter, setFilter] = useState<string>('All');

  const categories = ['All', 'Desktop Development', 'Web Development'];

  const filteredProjects = filter === 'All' ? projects : projects.filter((project) => project.category === filter);

  return (
    <Box
      minH="100vh"
      bgGradient="to-br"
      gradientFrom="purple.900"
      gradientVia="gray.800"
      gradientTo="purple.800"
      position="relative"
      py={20}
      overflow="hidden"
      id="myprojects"
    >
      {/* Background decorative elements */}
      <Box position="absolute" inset={0}>
        <Box
          position="absolute"
          top="80px"
          left="40px"
          w="128px"
          h="128px"
          bg="purple.400"
          opacity={0.15}
          borderRadius="full"
          filter="blur(48px)"
        />
        <Box
          position="absolute"
          top="160px"
          right="80px"
          w="192px"
          h="192px"
          bg="purple.500"
          opacity={0.2}
          borderRadius="full"
          filter="blur(48px)"
        />
        <Box
          position="absolute"
          bottom="80px"
          left="80px"
          w="160px"
          h="160px"
          bg="purple.600"
          opacity={0.15}
          borderRadius="full"
          filter="blur(48px)"
        />
        <Box
          position="absolute"
          bottom="128px"
          right="128px"
          w="96px"
          h="96px"
          bg="purple.700"
          opacity={0.2}
          borderRadius="full"
          filter="blur(32px)"
        />
      </Box>

      <Container maxW="7xl" position="relative" zIndex={10}>
        {/* Section Header */}
        <VStack gap={6} mb={16} textAlign="center">
          <Heading
            color="white"
            size={{ base: '3xl', md: '4xl', lg: '5xl' }}
            fontWeight="bold"
          >
            My Projects
          </Heading>
          <Box
            w="80px"
            h="4px"
            bgGradient="to-r"
            gradientFrom="purple.300"
            gradientTo="pink.400"
            borderRadius="full"
          />
        </VStack>

        {/* Filter Buttons */}
        <HStack gap={4} justify="center" mb={12}>
          {categories.map((category) => (
            <Button
              key={category}
              bg={filter === category ? 'whiteAlpha.200' : 'whiteAlpha.100'}
              backdropFilter="blur(20px)"
              borderRadius="full"
              border="1px solid"
              borderColor="whiteAlpha.100"
              color="white"
              fontWeight="semibold"
              px={6}
              py={2}
              _hover={{ bg: 'whiteAlpha.250' }}
              transition="all 0.3s"
              onClick={() => setFilter(category)}
            >
              {category}
            </Button>
          ))}
        </HStack>

        {/* Projects Grid */}
        <Grid
          templateColumns={{ base: '1fr', md: 'repeat(2, 1fr)', lg: 'repeat(3, 1fr)' }}
          gap={8}
        >
          {filteredProjects.map((project) => (
            <GridItem key={project.id}>
              <DialogRoot>
                <DialogTrigger asChild>
                  <Box
                    bg="whiteAlpha.50"
                    backdropFilter="blur(20px)"
                    borderRadius="2xl"
                    border="1px solid"
                    borderColor="whiteAlpha.80"
                    boxShadow="0 8px 32px rgba(0, 0, 0, 0.2)"
                    p={6}
                    transition="all 0.3s"
                    _hover={{
                      transform: 'translateY(-8px)',
                      boxShadow: '0 12px 40px rgba(0, 0, 0, 0.3)',
                    }}
                    cursor="pointer"
                  >
                    <Box
                      w="full"
                      h="200px"
                      bgGradient="to-br"
                      gradientFrom="purple.400/30"
                      gradientTo="purple.500/40"
                      borderRadius="xl"
                      mb={4}
                      display="flex"
                      alignItems="center"
                      justifyContent="center"
                      overflow="hidden"
                    >
                      {project.image ? (
                        <img 
                          src={project.image} 
                          alt={project.title} 
                          style={{ width: '100%', height: '100%', objectFit: 'cover', borderRadius: '8px' }} 
                        />
                      ) : (
                        <Text color="white" opacity={0.6} fontSize="sm">
                          Project Preview
                        </Text>
                      )}
                    </Box>
                    <VStack align="start" gap={3}>
                      <Badge
                        bgGradient="to-r"
                        gradientFrom="purple.500"
                        gradientTo="pink.500"
                        color="white"
                        px={3}
                        py={1}
                        borderRadius="full"
                        fontSize="xs"
                      >
                        {project.category}
                      </Badge>
                      <Heading color="white" size="xl" fontWeight="bold">
                        {project.title}
                      </Heading>
                      <Text color="white" opacity={0.6} fontSize="sm" lineClamp={2}>
                        {project.description}
                      </Text>
                    </VStack>
                  </Box>
                </DialogTrigger>
                
                <DialogContent
                  bg="whiteAlpha.50"
                  backdropFilter="blur(20px)"
                  borderRadius="2xl"
                  border="1px solid"
                  borderColor="whiteAlpha.80"
                  boxShadow="0 8px 32px rgba(0, 0, 0, 0.2)"
                  maxW="xl"
                >
                  <DialogHeader>
                    <Heading color="white" size="2xl" fontWeight="bold">
                      {project.title}
                    </Heading>
                    <DialogCloseTrigger color="white" />
                  </DialogHeader>
                  <DialogBody pb={6}>
                    <VStack gap={4} align="start">
                      {project.image && (
                        <Box
                          w="full"
                          h="300px"
                          bgGradient="to-br"
                          gradientFrom="purple.400/30"
                          gradientTo="purple.500/40"
                          borderRadius="xl"
                          overflow="hidden"
                        >
                          <img
                            src={project.image}
                            alt={project.title}
                            style={{ width: '100%', height: '100%', objectFit: 'cover' }}
                          />
                        </Box>
                      )}
                      <Badge
                        bgGradient="to-r"
                        gradientFrom="purple.500"
                        gradientTo="pink.500"
                        color="white"
                        px={3}
                        py={1}
                        borderRadius="full"
                        fontSize="xs"
                      >
                        {project.category}
                      </Badge>
                      <Text color="white" opacity={0.6} fontSize="md">
                        {project.description}
                      </Text>
                      <Button
                        as="a"
                        bgGradient="to-r"
                        gradientFrom="purple.500"
                        gradientTo="pink.500"
                        color="white"
                        borderRadius="full"
                        px={6}
                        py={2}
                        _hover={{ 
                          bgGradient: "to-r",
                          gradientFrom: "purple.600",
                          gradientTo: "pink.600"
                        }}
                      >
                        View Project
                      </Button>
                    </VStack>
                  </DialogBody>
                </DialogContent>
              </DialogRoot>
            </GridItem>
          ))}
        </Grid>
      </Container>

      {/* Bottom decorative elements */}
      <Box
        position="absolute"
        bottom={0}
        left={0}
        w="full"
        h="128px"
        bgGradient="to-t"
        gradientFrom="purple.700/50"
        gradientTo="transparent"
      />
    </Box>
  );
};

export default Projects;

// File: c:\Users\ashre\Downloads\demo (1)\front\asso_front\src\components\ui\skills.tsx
// File: src\components\ui\skills.tsx
import { useState, useEffect } from 'react';
import {
  Box,
  Container,
  Heading,
  Text,
  VStack,
  HStack,
  Grid,
  GridItem,
  Button,
  Image,
} from '@chakra-ui/react';

type ColorType = 'cyan' | 'yellow' | 'blue' | 'red' | 'purple' | 'green' | 'orange' | 'gray';

interface Skill {
  name: string;
  category: string;
  logo: string;
  color: ColorType;
}

const Skills = () => {
  const [activeSkill, setActiveSkill] = useState<string | null>(null);
  const [glowIndex, setGlowIndex] = useState(0);

  const allSkills: Skill[] = [
    { name: 'React.js', category: 'Frontend', logo: '/src/assets/images/react.png', color: 'cyan' },
    { name: 'JavaScript', category: 'Frontend', logo: '/src/assets/images/javascript.png', color: 'yellow' },
    { name: 'HTML5', category: 'Frontend', logo: '/src/assets/images/html5.png', color: 'red' },
    { name: 'CSS3', category: 'Frontend', logo: '/src/assets/images/css3.png', color: 'blue' },
    { name: 'TypeScript', category: 'Frontend', logo: '/src/assets/images/typescript.png', color: 'blue' },
    { name: 'PHP', category: 'Backend', logo: '/src/assets/images/php.png', color: 'purple' },
    { name: 'Java', category: 'Backend', logo: '/src/assets/images/java.png', color: 'red' },
    { name: 'Node.js', category: 'Backend', logo: '/src/assets/images/nodejs.png', color: 'green' },
    { name: 'Express.js', category: 'Backend', logo: '/src/assets/images/express-js.png', color: 'gray' },
    { name: 'Python', category: 'Backend', logo: '/src/assets/images/python.png', color: 'yellow' },
    { name: 'MySQL', category: 'Database', logo: '/src/assets/images/mysql.png', color: 'blue' },
    { name: 'PostgreSQL', category: 'Database', logo: '/src/assets/images/postgresql.png', color: 'blue' },
    { name: 'WordPress', category: 'Tools', logo: '/src/assets/images/wordpress.png', color: 'blue' },
    { name: 'Git', category: 'Tools', logo: '/src/assets/images/git.png', color: 'red' },
    { name: 'Postman', category: 'Tools', logo: '/src/assets/images/postman.png', color: 'orange' },
    { name: 'Swagger', category: 'Tools', logo: '/src/assets/images/swagger.png', color: 'green' },
  ];

  const categories = ['All', 'Frontend', 'Backend', 'Database', 'Tools'];
  const [selectedCategory, setSelectedCategory] = useState('All');

  const filteredSkills = selectedCategory === 'All'
    ? allSkills
    : allSkills.filter((skill) => skill.category === selectedCategory);

  useEffect(() => {
    const interval = setInterval(() => {
      setGlowIndex((prev) => (prev + 1) % filteredSkills.length);
    }, 2500);
    return () => clearInterval(interval);
  }, [filteredSkills.length]);

  const getColorStyles = (color: ColorType) => {
    const colors = {
      cyan: { primary: '#06b6d4', secondary: '#0891b2', light: '#67e8f9', glow: 'rgba(6, 182, 212, 0.3)' },
      yellow: { primary: '#fbbf24', secondary: '#f59e0b', light: '#fde047', glow: 'rgba(251, 191, 36, 0.3)' },
      blue: { primary: '#3b82f6', secondary: '#2563eb', light: '#93c5fd', glow: 'rgba(59, 130, 246, 0.3)' },
      red: { primary: '#ef4444', secondary: '#dc2626', light: '#fca5a5', glow: 'rgba(239, 68, 68, 0.3)' },
      purple: { primary: '#A855F7', secondary: '#9333EA', light: '#c4b5fd', glow: 'rgba(168, 85, 247, 0.3)' },
      green: { primary: '#10b981', secondary: '#059669', light: '#6ee7b7', glow: 'rgba(16, 185, 129, 0.3)' },
      orange: { primary: '#f97316', secondary: '#ea580c', light: '#fdba74', glow: 'rgba(249, 115, 22, 0.3)' },
      gray: { primary: '#6b7280', secondary: '#4b5563', light: '#d1d5db', glow: 'rgba(107, 114, 128, 0.3)' },
    };
    return colors[color] || colors.gray;
  };

  return (
    <Box
      minH="100vh"
      background="linear-gradient(135deg, #2D1B69 0%, #1E1B3A 50%, #2A1A3E 100%)"
      position="relative"
      py={20}
      overflow="hidden"
    >
      {/* Background decorative elements */}
      <Box position="absolute" inset="0">
        <Box
          position="absolute"
          top="80px"
          left="40px"
          width="128px"
          height="128px"
          background="#8B5CF6"
          opacity={0.15}
          borderRadius="full"
          filter="blur(48px)"
        />
        <Box
          position="absolute"
          top="160px"
          right="80px"
          width="192px"
          height="192px"
          background="#A855F7"
          opacity={0.2}
          borderRadius="full"
          filter="blur(48px)"
        />
        <Box
          position="absolute"
          bottom="80px"
          left="80px"
          width="160px"
          height="160px"
          background="#7C3AED"
          opacity={0.15}
          borderRadius="full"
          filter="blur(48px)"
        />
        <Box
          position="absolute"
          bottom="128px"
          right="128px"
          width="96px"
          height="96px"
          background="#9333EA"
          opacity={0.2}
          borderRadius="full"
          filter="blur(32px)"
        />
      </Box>

      <Container maxWidth="7xl" position="relative" zIndex={10}>
        {/* Section Header */}
        <VStack gap={6} marginBottom={16} textAlign="center">
          <Heading
            color="white"
            fontSize={{ base: '4xl', md: '5xl', lg: '6xl' }}
            fontWeight="bold"
          >
            Technical <Text as="span" background="linear-gradient(90deg, #A855F7 0%, #D946EF 100%)" backgroundClip="text">Skills</Text>
          </Heading>
          <Box
            width="80px"
            height="4px"
            background="linear-gradient(90deg, #A855F7 0%, #D946EF 100%)"
            borderRadius="full"
          />
        </VStack>

        {/* Category Filters */}
        <HStack gap={4} justifyContent="center" marginBottom={12}>
          {categories.map((category) => (
            <Button
              key={category}
              background={selectedCategory === category ? 'rgba(255, 255, 255, 0.2)' : 'rgba(255, 255, 255, 0.1)'}
              backdropFilter="blur(20px)"
              borderRadius="full"
              border="1px solid"
              borderColor="rgba(255, 255, 255, 0.1)"
              color="white"
              fontWeight="semibold"
              paddingX={6}
              paddingY={2}
              _hover={{ background: 'rgba(255, 255, 255, 0.25)' }}
              transition="all 0.3s"
              onClick={() => setSelectedCategory(category)}
            >
              {category}
            </Button>
          ))}
        </HStack>

        {/* Skills Grid */}
        <Grid
          templateColumns={{ base: 'repeat(auto-fit, minmax(140px, 1fr))', md: 'repeat(auto-fit, minmax(180px, 1fr))' }}
          gap={6}
        >
          {filteredSkills.map((skill, index) => {
            const isActive = glowIndex === index;
            const isHovered = activeSkill === skill.name;
            const colors = getColorStyles(skill.color);

            return (
              <GridItem
                key={skill.name}
                background="rgba(255, 255, 255, 0.1)"
                backdropFilter="blur(20px)"
                borderRadius="2xl"
                border="1px solid"
                borderColor={isActive || isHovered ? colors.primary : 'rgba(255, 255, 255, 0.2)'}
                padding={6}
                transition="all 0.3s"
                _hover={{
                  transform: 'translateY(-8px)',
                  boxShadow: `0 12px 40px ${colors.glow}`,
                }}
                cursor="pointer"
                onMouseEnter={() => setActiveSkill(skill.name)}
                onMouseLeave={() => setActiveSkill(null)}
                position="relative"
              >
                {isActive && (
                  <Box
                    position="absolute"
                    top="12px"
                    right="12px"
                    width="8px"
                    height="8px"
                    background={colors.primary}
                    borderRadius="full"
                    animation="ping 1s infinite"
                  />
                )}
                <VStack alignItems="center" gap={3}>
                  <Image
                    src={skill.logo}
                    alt={`${skill.name} logo`}
                    boxSize="64px"
                    objectFit="contain"
                    filter={isActive || isHovered ? 'brightness(1.1) saturate(1.2)' : 'brightness(0.9)'}
                    transition="all 0.3s"
                  />
                  <Text
                    fontSize="md"
                    fontWeight="semibold"
                    color="white"
                    textAlign="center"
                  >
                    {skill.name}
                  </Text>
                  <Text
                    fontSize="xs"
                    paddingX={3}
                    paddingY={1}
                    borderRadius="full"
                    border="1px solid"
                    borderColor={isActive || isHovered ? colors.primary : 'rgba(255, 255, 255, 0.2)'}
                    background={isActive || isHovered ? `${colors.primary}20` : 'rgba(255, 255, 255, 0.1)'}
                    color={isActive || isHovered ? colors.light : 'gray.400'}
                  >
                    {skill.category}
                  </Text>
                </VStack>
              </GridItem>
            );
          })}
        </Grid>
      </Container>

      {/* Bottom decorative gradient */}
      <Box
        position="absolute"
        bottom={0}
        left={0}
        width="full"
        height="128px"
        background="linear-gradient(to top, rgba(45, 27, 105, 0.4) 0%, transparent 100%)"
      />
      
      <style>
        {`
          @keyframes ping {
            75%, 100% { transform: scale(2); opacity: 0; }
          }
        `}
      </style>
    </Box>
  );
};

export default Skills;

// File: c:\Users\ashre\Downloads\demo (1)\front\asso_front\src\features\landingpage.tsx
import React from 'react';
import {
  Box,
  Container,
  Flex,
  Text,
  Heading,
  Button,
  HStack,
  VStack,
  IconButton,
} from '@chakra-ui/react';
import { Download, Github, Linkedin, Mail, Dribbble } from 'lucide-react';
import { Player } from '@lottiefiles/react-lottie-player'; // Import Lottie Player

const LandingPage = () => {
  return (
    <Box
      h="100vh"
      bg="linear-gradient(135deg, #2D1B69 0%, #1E1B3A 50%, #2A1A3E 100%)"
      position="relative"
      overflow="hidden"
    >
      {/* Background decorative elements */}
      <Box position="absolute" inset={0}>
        <Box
          position="absolute"
          top="80px"
          left="40px"
          w="128px"
          h="128px"
          bg="#8B5CF6"
          opacity={0.15}
          borderRadius="full"
          filter="blur(48px)"
        />
        <Box
          position="absolute"
          top="160px"
          right="80px"
          w="192px"
          h="192px"
          bg="#A855F7"
          opacity={0.2}
          borderRadius="full"
          filter="blur(48px)"
        />
        <Box
          position="absolute"
          bottom="80px"
          left="80px"
          w="160px"
          h="160px"
          bg="#7C3AED"
          opacity={0.15}
          borderRadius="full"
          filter="blur(48px)"
        />
        <Box
          position="absolute"
          bottom="128px"
          right="128px"
          w="96px"
          h="96px"
          bg="#9333EA"
          opacity={0.2}
          borderRadius="full"
          filter="blur(32px)"
        />
      </Box>

      {/* Main Content */}
      <Box maxW="full" px={8} py={12} position="relative" zIndex={10}>
        <Flex
          direction={{ base: 'column', lg: 'row' }}
          gap={12}
          align="center"
          minH="100vh"
          maxW="7xl"
          mx="auto"
        >
          {/* Left Content */}
          <VStack align={{ base: 'center', lg: 'start' }} spaceY={8} flex={1}>
            <VStack align={{ base: 'center', lg: 'start' }} spaceY={4}>
              <VStack align={{ base: 'center', lg: 'start' }} spaceY={2}>
                <Heading
                  color="white"
                  fontSize={{ base: '4xl', md: '5xl', lg: '6xl' }}
                  fontWeight="bold"
                  textAlign={{ base: 'center', lg: 'left' }}
                  lineHeight="1.1"
                >
                  Hi, I'm Shahd Najjar
                </Heading>
                
                <Flex align="baseline" gap={3} wrap="wrap" justify={{ base: 'center', lg: 'start' }}>
                  <Heading
                    fontSize={{ base: '3xl', md: '4xl', lg: '5xl' }}
                    fontWeight="bold"
                    bg="linear-gradient(90deg, #A855F7 0%, #D946EF 100%)"
                    bgClip="text"
                    color="transparent"
                    lineHeight="1.3"
                  >
                    Full-Stack
                  </Heading>
                  <Heading
                    color="white"
                    fontSize={{ base: '3xl', md: '4xl', lg: '5xl' }}
                    fontWeight="bold"
                  >
                    Developer
                  </Heading>
                </Flex>
              </VStack>
              
              <Text
                color="white"
                opacity={0.6}
                fontSize="lg"
                maxW="md"
                lineHeight="relaxed"
                textAlign={{ base: 'center', lg: 'left' }}
              >
                Second-year Computer Science student passionate about web development and digital project management. I create robust and user-friendly web applications, transforming ideas into efficient digital solutions.
              </Text>
            </VStack>

            {/* Action Buttons */}
            <HStack spaceX={4} wrap="wrap" justify={{ base: 'center', lg: 'start' }}>
              <Button
                bg="white"
                color="#2D1B69"
                px={8}
                py={6}
                borderRadius="full"
                fontWeight="semibold"
                _hover={{ bg: 'gray.100' }}
                transition="all 0.3s"
                boxShadow="lg"
                size="lg"
              >
                My Projects
              </Button>
              <Button
                variant="outline"
                bg="rgba(255, 255, 255, 0.1)"
                color="white"
                borderColor="rgba(255, 255, 255, 0.2)"
                px={8}
                py={6}
                borderRadius="full"
                fontWeight="semibold"
                _hover={{ bg: 'rgba(255, 255, 255, 0.2)' }}
                transition="all 0.3s"
                size="lg"
              >
                <Download size={18} style={{ marginRight: '8px' }} />
                Download CV
              </Button>
            </HStack>

            {/* Social Icons */}
            <HStack spaceX={4}>
              <IconButton
                aria-label="GitHub"
                w={12}
                h={12}
                bg="rgba(255, 255, 255, 0.1)"
                color="white"
                borderRadius="full"
                _hover={{ bg: 'rgba(255, 255, 255, 0.2)' }}
                transition="all 0.3s"
                backdropFilter="blur(10px)"
              >
                <Github size={20} />
              </IconButton>
              <IconButton
                aria-label="LinkedIn"
                w={12}
                h={12}
                bg="rgba(255, 255, 255, 0.1)"
                color="white"
                borderRadius="full"
                _hover={{ bg: 'rgba(255, 255, 255, 0.2)' }}
                transition="all 0.3s"
                backdropFilter="blur(10px)"
              >
                <Linkedin size={20} />
              </IconButton>
              <IconButton
                aria-label="Email"
                w={12}
                h={12}
                bg="rgba(255, 255, 255, 0.1)"
                color="white"
                borderRadius="full"
                _hover={{ bg: 'rgba(255, 255, 255, 0.2)' }}
                transition="all 0.3s"
                backdropFilter="blur(10px)"
              >
                <Mail size={20} />
              </IconButton>
              <IconButton
                aria-label="Dribbble"
                w={12}
                h={12}
                bg="rgba(255, 255, 255, 0.1)"
                color="white"
                borderRadius="full"
                _hover={{ bg: 'rgba(255, 255, 255, 0.2)' }}
                transition="all 0.3s"
                backdropFilter="blur(10px)"
              >
                <Dribbble size={20} />
              </IconButton>
            </HStack>
          </VStack>

          {/* Right Content - Just the Lottie Animation */}
          <Flex justify={{ base: 'center', lg: 'end' }} flex={1}>
            <Box position="relative">
              {/* Just the Lottie Animation - clean and simple */}
              <Box
                w="500px"
                h="500px"
                display="flex"
                alignItems="center"
                justifyContent="center"
              >
                      <Player
                        autoplay
                        loop
                        speed={0.8}
                        src="src\assets\animations\Web Development.json" // Replace with your .lottie or .json file path
                        style={{ width: '500px', height: '500px' }}
                      />
              </Box>
            </Box>
          </Flex>
        </Flex>
      </Box>

      {/* About Me Section Preview */}
      <Box maxW="full" px={8} py={16} position="relative" zIndex={10}>
        <VStack spaceY={4} maxW="7xl" mx="auto">
          <Heading color="white" fontSize="3xl" fontWeight="bold">
            About me
          </Heading>
          <Box
            w="80px"
            h="4px"
            bg="linear-gradient(90deg, #A855F7 0%, #D946EF 100%)"
            borderRadius="full"
          />
        </VStack>
      </Box>

      {/* Bottom decorative elements */}
      <Box
        position="absolute"
        bottom={0}
        left={0}
        w="full"
        h="128px"
        bg="linear-gradient(to top, rgba(45, 27, 105, 0.4) 0%, transparent 100%)"
      />
    </Box>
  );
};

export default LandingPage;

// File: c:\Users\ashre\Downloads\demo (1)\front\asso_front\src\main.tsx
import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import { ChakraProvider, createSystem, defaultConfig } from '@chakra-ui/react';
import App from './App.tsx';
import './index.css';

// Create the system with default config
const system = createSystem(defaultConfig);

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <ChakraProvider value={system}>
      <App />
    </ChakraProvider>
  </StrictMode>
);

